import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import './CourseEditor.css';

interface CourseData {
  _id: string;
  title: string;
  description: string;
  thumbnail: string;
  domain: string;
  level: 'beginner' | 'intermediate' | 'advanced';
  price: number;
  status: 'draft' | 'published' | 'pending' | 'rejected';
  tags: string[];
  requirements: string[];
  objectives: string[];
}

const CourseEditor: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [course, setCourse] = useState<CourseData | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [formData, setFormData] = useState<Partial<CourseData>>({});
  const [thumbnailFile, setThumbnailFile] = useState<File | null>(null);
  console.log(thumbnailFile);
  const [thumbnailPreview, setThumbnailPreview] = useState<string>('');

  useEffect(() => {
    // Check if this is create mode (no id) or edit mode
    if (!id || id === 'new') {
      // Create mode - set default values
      const defaultCourse: Partial<CourseData> = {
        title: '',
        description: '',
        thumbnail: '',
        domain: '',
        level: 'beginner',
        price: 0,
        status: 'draft',
        tags: [''],
        requirements: [''],
        objectives: ['']
      };
      setCourse(null);
      setFormData(defaultCourse);
      setThumbnailPreview('');
      setLoading(false);
    } else {
      // Edit mode - fetch existing course data
      setTimeout(() => {
        const mockCourse: CourseData = {
          _id: id,
          title: 'React Advanced Patterns',
          description: 'Kh√≥a h·ªçc n√¢ng cao v·ªÅ React, bao g·ªìm c√°c pattern v√† best practices ƒë·ªÉ x√¢y d·ª±ng ·ª©ng d·ª•ng web hi·ªán ƒë·∫°i.',
          thumbnail: '/images/apollo.png',
          domain: 'Web Development',
          level: 'advanced',
          price: 299000,
          status: 'draft',
          tags: ['React', 'JavaScript', 'Frontend', 'Advanced'],
          requirements: ['Ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ React', 'JavaScript ES6+', 'HTML/CSS'],
          objectives: ['Hi·ªÉu s√¢u v·ªÅ React patterns', 'X√¢y d·ª±ng ·ª©ng d·ª•ng scalable', 'T·ªëi ∆∞u hi·ªáu su·∫•t']
        };
        setCourse(mockCourse);
        setFormData(mockCourse);
        setThumbnailPreview(mockCourse.thumbnail);
        setLoading(false);
      }, 1000);
    }
  }, [id]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleThumbnailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setThumbnailFile(file);
      const reader = new FileReader();
      reader.onload = (e) => {
        setThumbnailPreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleTagChange = (index: number, value: string) => {
    const newTags = [...(formData.tags || [])];
    newTags[index] = value;
    setFormData(prev => ({ ...prev, tags: newTags }));
  };

  const addTag = () => {
    setFormData(prev => ({
      ...prev,
      tags: [...(prev.tags || []), '']
    }));
  };

  const removeTag = (index: number) => {
    const newTags = [...(formData.tags || [])];
    newTags.splice(index, 1);
    setFormData(prev => ({ ...prev, tags: newTags }));
  };

  const handleRequirementChange = (index: number, value: string) => {
    const newRequirements = [...(formData.requirements || [])];
    newRequirements[index] = value;
    setFormData(prev => ({ ...prev, requirements: newRequirements }));
  };

  const addRequirement = () => {
    setFormData(prev => ({
      ...prev,
      requirements: [...(prev.requirements || []), '']
    }));
  };

  const removeRequirement = (index: number) => {
    const newRequirements = [...(formData.requirements || [])];
    newRequirements.splice(index, 1);
    setFormData(prev => ({ ...prev, requirements: newRequirements }));
  };

  const handleObjectiveChange = (index: number, value: string) => {
    const newObjectives = [...(formData.objectives || [])];
    newObjectives[index] = value;
    setFormData(prev => ({ ...prev, objectives: newObjectives }));
  };

  const addObjective = () => {
    setFormData(prev => ({
      ...prev,
      objectives: [...(prev.objectives || []), '']
    }));
  };

  const removeObjective = (index: number) => {
    const newObjectives = [...(formData.objectives || [])];
    newObjectives.splice(index, 1);
    setFormData(prev => ({ ...prev, objectives: newObjectives }));
  };

  const handleSave = async () => {
    setSaving(true);
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 2000));
    setSaving(false);
    alert('Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
  };

  const handlePublish = async () => {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xu·∫•t b·∫£n kh√≥a h·ªçc n√†y?')) {
      setSaving(true);
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      setSaving(false);
      alert('Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c xu·∫•t b·∫£n th√†nh c√¥ng!');
      navigate('/teacher/courses');
    }
  };

  if (loading) {
    return (
      <div className="teacher-dashboard">
        <div className="teacher-dashboard__header">
          <div className="teacher-dashboard__breadcrumbs">
            <span>Teacher Dashboard</span>
            <span>/</span>
            <span>Course Studio</span>
            <span>/</span>
            <span>Ch·ªânh s·ª≠a kh√≥a h·ªçc</span>
          </div>
          <h1 className="teacher-dashboard__title">Ch·ªânh s·ª≠a kh√≥a h·ªçc</h1>
        </div>
        <div className="teacher-dashboard__content">
          <div className="dashboard__loading">
            <div className="dashboard__loading-spinner"></div>
            <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
          </div>
        </div>
      </div>
    );
  }

  if (!course) return null;

  return (
    <div className="teacher-dashboard">
      <div className="teacher-dashboard__header">
        <div className="teacher-dashboard__breadcrumbs">
          <span>Teacher Dashboard</span>
          <span>/</span>
          <span>Course Studio</span>
          <span>/</span>
          <span>{!id || id === 'new' ? 'T·∫°o kh√≥a h·ªçc m·ªõi' : 'Ch·ªânh s·ª≠a kh√≥a h·ªçc'}</span>
        </div>
        <h1 className="teacher-dashboard__title">
          {!id || id === 'new' ? 'T·∫°o kh√≥a h·ªçc m·ªõi' : 'Ch·ªânh s·ª≠a kh√≥a h·ªçc'}
        </h1>
      </div>

      <div className="teacher-dashboard__content">
        <form className="course-editor__form" onSubmit={(e) => e.preventDefault()}>
          {/* Basic Information */}
          <div className="form-section">
            <h3 className="form-section__title">üìù Th√¥ng tin c∆° b·∫£n</h3>
            
            <div className="form-group">
              <label htmlFor="title">T√™n kh√≥a h·ªçc *</label>
              <input
                type="text"
                id="title"
                name="title"
                value={formData.title || ''}
                onChange={handleInputChange}
                placeholder="Nh·∫≠p t√™n kh√≥a h·ªçc"
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="description">M√¥ t·∫£ kh√≥a h·ªçc *</label>
              <textarea
                id="description"
                name="description"
                value={formData.description || ''}
                onChange={handleInputChange}
                placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ kh√≥a h·ªçc"
                rows={4}
                required
              />
            </div>

            <div className="form-row">
              <div className="form-group">
                <label htmlFor="domain">Lƒ©nh v·ª±c *</label>
                <select
                  id="domain"
                  name="domain"
                  value={formData.domain || ''}
                  onChange={handleInputChange}
                  required
                >
                  <option value="">Ch·ªçn lƒ©nh v·ª±c</option>
                  <option value="Web Development">Web Development</option>
                  <option value="Mobile Development">Mobile Development</option>
                  <option value="Data Science">Data Science</option>
                  <option value="Design">Design</option>
                  <option value="Business">Business</option>
                  <option value="Marketing">Marketing</option>
                </select>
              </div>

              <div className="form-group">
                <label htmlFor="level">C·∫•p ƒë·ªô *</label>
                <select
                  id="level"
                  name="level"
                  value={formData.level || ''}
                  onChange={handleInputChange}
                  required
                >
                  <option value="">Ch·ªçn c·∫•p ƒë·ªô</option>
                  <option value="beginner">C∆° b·∫£n</option>
                  <option value="intermediate">Trung c·∫•p</option>
                  <option value="advanced">N√¢ng cao</option>
                </select>
              </div>

              <div className="form-group">
                <label htmlFor="price">Gi√° (VND) *</label>
                <input
                  type="number"
                  id="price"
                  name="price"
                  value={formData.price || ''}
                  onChange={handleInputChange}
                  placeholder="0"
                  min="0"
                  required
                />
              </div>
            </div>
          </div>

          {/* Thumbnail */}
          <div className="form-section">
            <h3 className="form-section__title">üñºÔ∏è Thumbnail</h3>
            
            <div className="thumbnail-upload">
              <div className="thumbnail-preview">
                <img src={thumbnailPreview} alt="Thumbnail preview" />
              </div>
              <div className="thumbnail-actions">
                <input
                  type="file"
                  id="thumbnail"
                  accept="image/*"
                  onChange={handleThumbnailChange}
                  className="thumbnail-input"
                />
                <label htmlFor="thumbnail" className="thumbnail-btn">
                  üìÅ Ch·ªçn ·∫£nh
                </label>
                <p className="thumbnail-hint">
                  K√≠ch th∆∞·ªõc khuy·∫øn ngh·ªã: 1280x720px, ƒë·ªãnh d·∫°ng: JPG, PNG
                </p>
              </div>
            </div>
          </div>

          {/* Tags */}
          <div className="form-section">
            <h3 className="form-section__title">üè∑Ô∏è Tags</h3>
            
            <div className="tags-container">
              {(formData.tags || []).map((tag, index) => (
                <div key={index} className="tag-input-group">
                  <input
                    type="text"
                    value={tag}
                    onChange={(e) => handleTagChange(index, e.target.value)}
                    placeholder="Nh·∫≠p tag"
                    className="tag-input"
                  />
                  <button
                    type="button"
                    onClick={() => removeTag(index)}
                    className="tag-remove-btn"
                  >
                    ‚úï
                  </button>
                </div>
              ))}
              <button type="button" onClick={addTag} className="add-tag-btn">
                ‚ûï Th√™m tag
              </button>
            </div>
          </div>

          {/* Requirements */}
          <div className="form-section">
            <h3 className="form-section__title">üìã Y√™u c·∫ßu ƒë·∫ßu v√†o</h3>
            
            <div className="requirements-container">
              {(formData.requirements || []).map((req, index) => (
                <div key={index} className="requirement-input-group">
                  <textarea
                    value={req}
                    onChange={(e) => handleRequirementChange(index, e.target.value)}
                    placeholder="Nh·∫≠p y√™u c·∫ßu"
                    rows={2}
                    className="requirement-input"
                  />
                  <button
                    type="button"
                    onClick={() => removeRequirement(index)}
                    className="requirement-remove-btn"
                  >
                    ‚úï
                  </button>
                </div>
              ))}
              <button type="button" onClick={addRequirement} className="add-requirement-btn">
                ‚ûï Th√™m y√™u c·∫ßu
              </button>
            </div>
          </div>

          {/* Learning Objectives */}
          <div className="form-section">
            <h3 className="form-section__title">üéØ M·ª•c ti√™u h·ªçc t·∫≠p</h3>
            
            <div className="objectives-container">
              {(formData.objectives || []).map((obj, index) => (
                <div key={index} className="objective-input-group">
                  <textarea
                    value={obj}
                    onChange={(e) => handleObjectiveChange(index, e.target.value)}
                    placeholder="Nh·∫≠p m·ª•c ti√™u h·ªçc t·∫≠p"
                    rows={2}
                    className="objective-input"
                  />
                  <button
                    type="button"
                    onClick={() => removeObjective(index)}
                    className="objective-remove-btn"
                  >
                    ‚úï
                  </button>
                </div>
              ))}
              <button type="button" onClick={addObjective} className="add-objective-btn">
                ‚ûï Th√™m m·ª•c ti√™u
              </button>
            </div>
          </div>

          {/* Actions */}
          <div className="form-actions">
            <button
              type="button"
              onClick={() => navigate('/teacher/courses')}
              className="teacher-dashboard__btn teacher-dashboard__btn--outline"
            >
              ‚Ü©Ô∏è Quay l·∫°i
            </button>
            <div className="form-actions__right">
              <button
                type="button"
                onClick={handleSave}
                disabled={saving}
                className="teacher-dashboard__btn teacher-dashboard__btn--secondary"
              >
                {saving ? 'üíæ ƒêang l∆∞u...' : (!id || id === 'new' ? 'üíæ T·∫°o kh√≥a h·ªçc' : 'üíæ L∆∞u b·∫£n nh√°p')}
              </button>
              <button
                type="button"
                onClick={handlePublish}
                disabled={saving}
                className="teacher-dashboard__btn teacher-dashboard__btn--primary"
              >
                {saving ? 'üöÄ ƒêang xu·∫•t b·∫£n...' : 'üöÄ Xu·∫•t b·∫£n kh√≥a h·ªçc'}
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CourseEditor;
