import React, { useState } from 'react';
import './AITools.css';

interface AITool {
  id: string;
  name: string;
  description: string;
  icon: string;
  category: 'content' | 'design' | 'analysis' | 'automation';
  isAvailable: boolean;
  usageCount: number;
  maxUsage: number;
}

const AITools: React.FC = () => {
  const [selectedCategory, setSelectedCategory] = useState<'all' | 'content' | 'design' | 'analysis' | 'automation'>('all');
  const [searchTerm, setSearchTerm] = useState('');

  const aiTools: AITool[] = [
    {
      id: '1',
      name: 'AI Avatar Generator',
      description: 'T·∫°o avatar chuy√™n nghi·ªáp cho kh√≥a h·ªçc v·ªõi AI',
      icon: 'üë§',
      category: 'design',
      isAvailable: true,
      usageCount: 12,
      maxUsage: 50
    },
    {
      id: '2',
      name: 'Thumbnail Designer',
      description: 'Thi·∫øt k·∫ø thumbnail h·∫•p d·∫´n cho video v√† kh√≥a h·ªçc',
      icon: 'üñºÔ∏è',
      category: 'design',
      isAvailable: true,
      usageCount: 8,
      maxUsage: 30
    },
    {
      id: '3',
      name: 'Content Moderation',
      description: 'Ki·ªÉm tra v√† l·ªçc n·ªôi dung kh√¥ng ph√π h·ª£p',
      icon: 'üõ°Ô∏è',
      category: 'content',
      isAvailable: true,
      usageCount: 25,
      maxUsage: 100
    },
    {
      id: '4',
      name: 'Auto Transcription',
      description: 'Chuy·ªÉn ƒë·ªïi video th√†nh vƒÉn b·∫£n t·ª± ƒë·ªông',
      icon: 'üìù',
      category: 'content',
      isAvailable: true,
      usageCount: 15,
      maxUsage: 40
    },
    {
      id: '5',
      name: 'Student Analytics',
      description: 'Ph√¢n t√≠ch h√†nh vi v√† hi·ªáu su·∫•t h·ªçc t·∫≠p c·ªßa h·ªçc vi√™n',
      icon: 'üìä',
      category: 'analysis',
      isAvailable: false,
      usageCount: 0,
      maxUsage: 0
    },
    {
      id: '6',
      name: 'Smart Grading',
      description: 'Ch·∫•m ƒëi·ªÉm b√†i t·∫≠p t·ª± ƒë·ªông v·ªõi AI',
      icon: '‚úÖ',
      category: 'automation',
      isAvailable: false,
      usageCount: 0,
      maxUsage: 0
    },
    {
      id: '7',
      name: 'Course Structure Optimizer',
      description: 'T·ªëi ∆∞u h√≥a c·∫•u tr√∫c kh√≥a h·ªçc d·ª±a tr√™n d·ªØ li·ªáu',
      icon: 'üèóÔ∏è',
      category: 'analysis',
      isAvailable: true,
      usageCount: 3,
      maxUsage: 20
    },
    {
      id: '8',
      name: 'Auto Quiz Generator',
      description: 'T·∫°o c√¢u h·ªèi tr·∫Øc nghi·ªám t·ª´ n·ªôi dung kh√≥a h·ªçc',
      icon: '‚ùì',
      category: 'automation',
      isAvailable: true,
      usageCount: 18,
      maxUsage: 60
    }
  ];

  const filteredTools = aiTools.filter(tool => {
    const matchesCategory = selectedCategory === 'all' || tool.category === selectedCategory;
    const matchesSearch = tool.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         tool.description.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  const getCategoryLabel = (category: string) => {
    const labels = {
      content: 'N·ªôi dung',
      design: 'Thi·∫øt k·∫ø',
      analysis: 'Ph√¢n t√≠ch',
      automation: 'T·ª± ƒë·ªông h√≥a'
    };
    return labels[category as keyof typeof labels] || category;
  };

  const getCategoryIcon = (category: string) => {
    const icons = {
      content: 'üìö',
      design: 'üé®',
      analysis: 'üìä',
      automation: 'ü§ñ'
    };
    return icons[category as keyof typeof icons] || 'üîß';
  };

  const getUsagePercentage = (usage: number, max: number) => {
    if (max === 0) return 0;
    return Math.min((usage / max) * 100, 100);
  };

  const getUsageColor = (percentage: number) => {
    if (percentage >= 80) return '#ef4444';
    if (percentage >= 60) return '#f59e0b';
    return '#10b981';
  };

  const handleToolClick = (tool: AITool) => {
    if (!tool.isAvailable) {
      alert('C√¥ng c·ª• n√†y ch∆∞a c√≥ s·∫µn. Vui l√≤ng n√¢ng c·∫•p g√≥i ƒë·ªÉ s·ª≠ d·ª•ng!');
      return;
    }
    
    // Simulate tool usage
    console.log(`Using AI tool: ${tool.name}`);
    alert(`ƒêang m·ªü ${tool.name}...`);
  };

  const getStatsSummary = () => {
    const total = aiTools.length;
    const available = aiTools.filter(t => t.isAvailable).length;
    const totalUsage = aiTools.reduce((sum, t) => sum + t.usageCount, 0);
    const totalMaxUsage = aiTools.reduce((sum, t) => sum + t.maxUsage, 0);

    return { total, available, totalUsage, totalMaxUsage };
  };

  const stats = getStatsSummary();

  return (
    <div className="teacher-dashboard">
      <div className="teacher-dashboard__header">
        <div className="teacher-dashboard__breadcrumbs">
          <span>Teacher Dashboard</span>
          <span>/</span>
          <span>AI Tools</span>
        </div>
        <h1 className="teacher-dashboard__title">AI Tools</h1>
      </div>

      <div className="teacher-dashboard__content">
        {/* Stats Overview */}
        <div className="ai-tools__stats">
          <div className="stat-card">
            <div className="stat-card__icon">ü§ñ</div>
            <div className="stat-card__content">
              <h3>{stats.total}</h3>
              <p>T·ªïng c√¥ng c·ª• AI</p>
            </div>
          </div>
          <div className="stat-card">
            <div className="stat-card__icon">‚úÖ</div>
            <div className="stat-card__content">
              <h3>{stats.available}</h3>
              <p>C√¥ng c·ª• c√≥ s·∫µn</p>
            </div>
          </div>
          <div className="stat-card">
            <div className="stat-card__icon">üìä</div>
            <div className="stat-card__content">
              <h3>{stats.totalUsage}</h3>
              <p>L∆∞·ª£t s·ª≠ d·ª•ng</p>
            </div>
          </div>
          <div className="stat-card">
            <div className="stat-card__icon">üéØ</div>
            <div className="stat-card__content">
              <h3>{Math.round((stats.totalUsage / stats.totalMaxUsage) * 100)}%</h3>
              <p>T·ª∑ l·ªá s·ª≠ d·ª•ng</p>
            </div>
          </div>
        </div>

        {/* Header Actions */}
        <div className="ai-tools__header-actions">
          <div className="ai-tools__search">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm c√¥ng c·ª• AI..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <button>üîç</button>
          </div>
          <button className="teacher-dashboard__btn teacher-dashboard__btn--primary">
            üöÄ N√¢ng c·∫•p g√≥i
          </button>
        </div>

        {/* Category Filter */}
        <div className="ai-tools__categories">
          <button
            className={`category-btn ${selectedCategory === 'all' ? 'active' : ''}`}
            onClick={() => setSelectedCategory('all')}
          >
            üåü T·∫•t c·∫£
          </button>
          <button
            className={`category-btn ${selectedCategory === 'content' ? 'active' : ''}`}
            onClick={() => setSelectedCategory('content')}
          >
            üìö N·ªôi dung
          </button>
          <button
            className={`category-btn ${selectedCategory === 'design' ? 'active' : ''}`}
            onClick={() => setSelectedCategory('design')}
          >
            üé® Thi·∫øt k·∫ø
          </button>
          <button
            className={`category-btn ${selectedCategory === 'analysis' ? 'active' : ''}`}
            onClick={() => setSelectedCategory('analysis')}
          >
            üìä Ph√¢n t√≠ch
          </button>
          <button
            className={`category-btn ${selectedCategory === 'automation' ? 'active' : ''}`}
            onClick={() => setSelectedCategory('automation')}
          >
            ü§ñ T·ª± ƒë·ªông h√≥a
          </button>
        </div>

        {/* AI Tools Grid */}
        <div className="ai-tools__grid">
          {filteredTools.length === 0 ? (
            <div className="ai-tools__empty">
              <div className="empty__icon">ü§ñ</div>
              <h3>Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• n√†o</h3>
              <p>Kh√¥ng c√≥ c√¥ng c·ª• AI n√†o kh·ªõp v·ªõi b·ªô l·ªçc hi·ªán t·∫°i.</p>
            </div>
          ) : (
            filteredTools.map((tool) => (
              <div 
                key={tool.id} 
                className={`ai-tool-card ${!tool.isAvailable ? 'disabled' : ''}`}
                onClick={() => handleToolClick(tool)}
              >
                <div className="tool-card__header">
                  <div className="tool-card__icon">
                    {tool.icon}
                  </div>
                  <div className="tool-card__category">
                    <span className="category-badge">
                      {getCategoryIcon(tool.category)} {getCategoryLabel(tool.category)}
                    </span>
                  </div>
                </div>
                
                <div className="tool-card__content">
                  <h3 className="tool-card__title">{tool.name}</h3>
                  <p className="tool-card__description">{tool.description}</p>
                  
                  {tool.isAvailable && (
                    <div className="tool-card__usage">
                      <div className="usage__info">
                        <span className="usage__text">
                          {tool.usageCount} / {tool.maxUsage} l∆∞·ª£t s·ª≠ d·ª•ng
                        </span>
                        <span className="usage__percentage">
                          {Math.round(getUsagePercentage(tool.usageCount, tool.maxUsage))}%
                        </span>
                      </div>
                      <div className="usage__bar">
                        <div 
                          className="usage__bar-fill"
                          style={{ 
                            width: `${getUsagePercentage(tool.usageCount, tool.maxUsage)}%`,
                            backgroundColor: getUsageColor(getUsagePercentage(tool.usageCount, tool.maxUsage))
                          }}
                        ></div>
                      </div>
                    </div>
                  )}
                </div>
                
                <div className="tool-card__footer">
                  {tool.isAvailable ? (
                    <button className="tool-card__action-btn">
                      üöÄ S·ª≠ d·ª•ng ngay
                    </button>
                  ) : (
                    <div className="tool-card__unavailable">
                      <span className="unavailable__icon">üîí</span>
                      <span className="unavailable__text">C·∫ßn n√¢ng c·∫•p</span>
                    </div>
                  )}
                </div>
              </div>
            ))
          )}
        </div>

        {/* Upgrade Banner */}
        <div className="ai-tools__upgrade-banner">
          <div className="upgrade-banner__content">
            <div className="upgrade-banner__icon">üöÄ</div>
            <div className="upgrade-banner__text">
              <h3>M·ªü kh√≥a t·∫•t c·∫£ AI Tools</h3>
              <p>N√¢ng c·∫•p l√™n g√≥i Pro ƒë·ªÉ s·ª≠ d·ª•ng kh√¥ng gi·ªõi h·∫°n t·∫•t c·∫£ c√¥ng c·ª• AI v√† t√≠nh nƒÉng n√¢ng cao</p>
            </div>
            <button className="teacher-dashboard__btn teacher-dashboard__btn--primary">
              N√¢ng c·∫•p ngay
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AITools;
