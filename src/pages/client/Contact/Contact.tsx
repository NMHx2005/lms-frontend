import React, { useState, useEffect } from 'react';
import './Contact.css';
import Footer from '@/components/Layout/client/Footer';
import TopBar from '@/components/Client/Home/TopBar/TopBar';
import Header from '@/components/Layout/client/Header';
import { clientSystemSettingsService } from '@/services/client/system-settings.service';
import type { SystemSettingsData } from '@/services/admin/system-settings.service';

interface ContactForm {
  name: string;
  email: string;
  subject: string;
  message: string;
  type: 'general' | 'support' | 'business' | 'feedback';
}

const Contact: React.FC = () => {
  const [formData, setFormData] = useState<ContactForm>({
    name: '',
    email: '',
    subject: '',
    message: '',
    type: 'general'
  });
  const [loading, setLoading] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const [settings, setSettings] = useState<SystemSettingsData | null>(null);

  // Fetch system settings on mount
  useEffect(() => {
    const fetchSettings = async () => {
      try {
        const response = await clientSystemSettingsService.getPublicSettings();
        if (response.success) {
          setSettings(response.data);
        }
      } catch (error) {
        console.error('Failed to fetch system settings:', error);
      }
    };
    fetchSettings();
  }, []);

  const getContactInfo = () => {
    if (!settings) {
      return [
        { icon: 'üìç', title: 'ƒê·ªãa ch·ªâ', content: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM, Vi·ªát Nam' },
        { icon: 'üìß', title: 'Email', content: 'contact@lmsplatform.com' },
        { icon: 'üìû', title: 'ƒêi·ªán tho·∫°i', content: '+84 28 1234 5678' },
        { icon: '‚è∞', title: 'Gi·ªù l√†m vi·ªác', content: 'Th·ª© 2 - Th·ª© 6: 8:00 - 18:00' }
      ];
    }

    const contactInfo = [];

    // Address
    if (settings.contactInfo.address) {
      const fullAddress = [
        settings.contactInfo.address,
        settings.contactInfo.city,
        settings.contactInfo.country
      ].filter(Boolean).join(', ');

      if (fullAddress) {
        contactInfo.push({
          icon: 'üìç',
          title: 'ƒê·ªãa ch·ªâ',
          content: fullAddress
        });
      }
    }

    // Email
    if (settings.contactInfo.email) {
      contactInfo.push({
        icon: 'üìß',
        title: 'Email',
        content: settings.contactInfo.email
      });
    }

    // Phone
    if (settings.contactInfo.phone) {
      contactInfo.push({
        icon: 'üìû',
        title: 'ƒêi·ªán tho·∫°i',
        content: settings.contactInfo.phone
      });
    }

    // Working hours (default)
    contactInfo.push({
      icon: '‚è∞',
      title: 'Gi·ªù l√†m vi·ªác',
      content: 'Th·ª© 2 - Th·ª© 6: 8:00 - 18:00'
    });

    return contactInfo;
  };

  const contactInfo = getContactInfo();

  const faqs = [
    {
      question: 'L√†m th·∫ø n√†o ƒë·ªÉ ƒëƒÉng k√Ω kh√≥a h·ªçc?',
      answer: 'B·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω kh√≥a h·ªçc b·∫±ng c√°ch t·∫°o t√†i kho·∫£n, ch·ªçn kh√≥a h·ªçc mong mu·ªën v√† thanh to√°n tr·ª±c tuy·∫øn.'
    },
    {
      question: 'T√¥i c√≥ th·ªÉ h·ªçc offline kh√¥ng?',
      answer: 'Hi·ªán t·∫°i ch√∫ng t√¥i ch·ªâ cung c·∫•p c√°c kh√≥a h·ªçc tr·ª±c tuy·∫øn ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh linh ho·∫°t v√† ti·ªán l·ª£i.'
    },
    {
      question: 'L√†m th·∫ø n√†o ƒë·ªÉ li√™n h·ªá v·ªõi gi·∫£ng vi√™n?',
      answer: 'B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi gi·∫£ng vi√™n th√¥ng qua h·ªá th·ªëng nh·∫Øn tin n·ªôi b·ªô ho·∫∑c ƒë·ªÉ l·∫°i comment trong kh√≥a h·ªçc.'
    },
    {
      question: 'T√¥i c√≥ th·ªÉ ho√†n ti·ªÅn n·∫øu kh√¥ng h√†i l√≤ng kh√¥ng?',
      answer: 'C√≥, ch√∫ng t√¥i c√≥ ch√≠nh s√°ch ho√†n ti·ªÅn trong v√≤ng 30 ng√†y n·∫øu b·∫°n kh√¥ng h√†i l√≤ng v·ªõi kh√≥a h·ªçc.'
    }
  ];

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    // Simulate API call
    setTimeout(() => {
      setLoading(false);
      setSubmitted(true);
      setFormData({
        name: '',
        email: '',
        subject: '',
        message: '',
        type: 'general'
      });
    }, 2000);
  };

  if (submitted) {
    return (
      <div className="contact-page">
        <div className="success-message">
          <div className="success-icon">‚úÖ</div>
          <h1>G·ª≠i tin nh·∫Øn th√†nh c√¥ng!</h1>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi ch√∫ng t√¥i. Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.</p>
          <button
            onClick={() => setSubmitted(false)}
            className="send-another-btn"
          >
            G·ª≠i tin nh·∫Øn kh√°c
          </button>
        </div>
      </div>
    );
  }

  return (
    <>
      <TopBar />
      <Header />
      <div className="contact-page">
        {/* Hero Section */}
        <section className="hero-section">
          <div className="hero-content">
            <h1>Li√™n h·ªá v·ªõi {settings?.siteName || 'ch√∫ng t√¥i'}</h1>
            <p>{settings?.siteTagline || 'Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng l·∫Øng nghe v√† h·ªó tr·ª£ b·∫°n. H√£y ƒë·ªÉ l·∫°i tin nh·∫Øn v√† ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ.'}</p>
          </div>
        </section>

        <div className="contact-content">
          <div className="container">
            <div className="contact-grid">
              {/* Contact Form */}
              <div className="contact-form-section">
                <h2>G·ª≠i tin nh·∫Øn</h2>
                <form onSubmit={handleSubmit} className="contact-form" autoComplete='off'>
                  <div className="form-row">
                    <div className="form-group">
                      <label htmlFor="name">H·ªç v√† t√™n *</label>
                      <input
                        type="text"
                        id="name"
                        name="name"
                        value={formData.name}
                        onChange={handleInputChange}
                        required
                        placeholder="Nh·∫≠p h·ªç v√† t√™n c·ªßa b·∫°n"
                      />
                    </div>
                    <div className="form-group">
                      <label htmlFor="email">Email *</label>
                      <input
                        type="email"
                        id="email"
                        name="email"
                        value={formData.email}
                        onChange={handleInputChange}
                        required
                        placeholder="Nh·∫≠p email c·ªßa b·∫°n"
                      />
                    </div>
                  </div>

                  <div className="form-row">
                    <div className="form-group">
                      <label htmlFor="type">Lo·∫°i tin nh·∫Øn *</label>
                      <select
                        id="type"
                        name="type"
                        value={formData.type}
                        onChange={handleInputChange}
                        required
                      >
                        <option value="general">Tin nh·∫Øn chung</option>
                        <option value="support">H·ªó tr·ª£ k·ªπ thu·∫≠t</option>
                        <option value="business">H·ª£p t√°c kinh doanh</option>
                        <option value="feedback">G√≥p √Ω ph·∫£n h·ªìi</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label htmlFor="subject">Ti√™u ƒë·ªÅ *</label>
                      <input
                        type="text"
                        id="subject"
                        name="subject"
                        value={formData.subject}
                        onChange={handleInputChange}
                        required
                        placeholder="Nh·∫≠p ti√™u ƒë·ªÅ tin nh·∫Øn"
                      />
                    </div>
                  </div>

                  <div className="form-group">
                    <label htmlFor="message">N·ªôi dung tin nh·∫Øn *</label>
                    <textarea
                      id="message"
                      name="message"
                      value={formData.message}
                      onChange={handleInputChange}
                      required
                      rows={6}
                      placeholder="Nh·∫≠p n·ªôi dung tin nh·∫Øn c·ªßa b·∫°n..."
                    />
                  </div>

                  <button
                    type="submit"
                    className="submit-btn"
                    disabled={loading}
                  >
                    {loading ? 'ƒêang g·ª≠i...' : 'G·ª≠i tin nh·∫Øn'}
                  </button>
                </form>
              </div>

              {/* Contact Information */}
              <div className="contact-info-section">
                <h2>Th√¥ng tin li√™n h·ªá</h2>
                <div className="contact-info-list">
                  {contactInfo.map((info, index) => (
                    <div key={index} className="contact-info-item">
                      <div className="info-icon">{info.icon}</div>
                      <div className="info-content">
                        <h3>{info.title}</h3>
                        <p>{info.content}</p>
                      </div>
                    </div>
                  ))}
                </div>

                {(settings?.socialMedia && Object.values(settings.socialMedia).some(v => v)) && (
                  <div className="social-links">
                    <h3>Theo d√µi ch√∫ng t√¥i</h3>
                    <div className="social-icons">
                      {settings.socialMedia.facebook && (
                        <a
                          href={settings.socialMedia.facebook}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="social-icon facebook"
                          aria-label="Facebook"
                        >
                          üìò
                        </a>
                      )}
                      {settings.socialMedia.twitter && (
                        <a
                          href={settings.socialMedia.twitter}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="social-icon twitter"
                          aria-label="Twitter"
                        >
                          üê¶
                        </a>
                      )}
                      {settings.socialMedia.linkedin && (
                        <a
                          href={settings.socialMedia.linkedin}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="social-icon linkedin"
                          aria-label="LinkedIn"
                        >
                          üíº
                        </a>
                      )}
                      {settings.socialMedia.youtube && (
                        <a
                          href={settings.socialMedia.youtube}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="social-icon youtube"
                          aria-label="YouTube"
                        >
                          üì∫
                        </a>
                      )}
                      {settings.socialMedia.instagram && (
                        <a
                          href={settings.socialMedia.instagram}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="social-icon instagram"
                          aria-label="Instagram"
                        >
                          üì∑
                        </a>
                      )}
                      {settings.socialMedia.github && (
                        <a
                          href={settings.socialMedia.github}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="social-icon github"
                          aria-label="GitHub"
                        >
                          üíª
                        </a>
                      )}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* FAQ Section */}
            <section className="faq-section">
              <h2>C√¢u h·ªèi th∆∞·ªùng g·∫∑p</h2>
              <div className="faq-list">
                {faqs.map((faq, index) => (
                  <div key={index} className="faq-item">
                    <h3 className="faq-question">{faq.question}</h3>
                    <p className="faq-answer">{faq.answer}</p>
                  </div>
                ))}
              </div>
            </section>

            {/* Map Section */}
            {settings?.contactInfo.address && (
              <section className="map-section">
                <h2>V·ªã tr√≠ c·ªßa ch√∫ng t√¥i</h2>
                <div className="map-container">
                  <div className="map-placeholder">
                    <div className="map-icon">üó∫Ô∏è</div>
                    <p>B·∫£n ƒë·ªì s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã t·∫°i ƒë√¢y</p>
                    <p className="map-address">
                      <strong>ƒê·ªãa ch·ªâ:</strong> {[
                        settings.contactInfo.address,
                        settings.contactInfo.city,
                        settings.contactInfo.country,
                        settings.contactInfo.zipCode
                      ].filter(Boolean).join(', ')}
                    </p>
                  </div>
                </div>
              </section>
            )}
          </div>
        </div>
      </div>
      <Footer />
    </>
  );
};

export default Contact;
