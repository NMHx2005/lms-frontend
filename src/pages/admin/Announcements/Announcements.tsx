import React, { useState, useEffect } from 'react';
// import './Announcements.css';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Stack,
  Grid,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Chip,
  CircularProgress,
  Paper,
  Tabs,
  Tab,
  ToggleButton,
  ToggleButtonGroup,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions
} from '@mui/material';

interface Announcement { _id: string; title: string; content: string; type: 'system' | 'email' | 'push'; status: 'draft' | 'scheduled' | 'published' | 'archived'; priority: 'low' | 'medium' | 'high' | 'urgent'; targetAudience: 'all' | 'students' | 'teachers' | 'admins' | 'specific'; scheduledAt?: string; publishedAt?: string; expiresAt?: string; createdBy: string; createdAt: string; updatedAt: string; readCount: number; clickCount: number; tags: string[]; attachments?: string[]; }

const Announcements: React.FC = () => {
  const [announcements, setAnnouncements] = useState<Announcement[]>([]);
  const [filteredAnnouncements, setFilteredAnnouncements] = useState<Announcement[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'all' | 'draft' | 'scheduled' | 'published' | 'archived'>('all');
  const [filters, setFilters] = useState({ search: '', type: '', priority: '', targetAudience: '', status: '' });
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedAnnouncement, setSelectedAnnouncement] = useState<Announcement | null>(null);
  const [viewMode, setViewMode] = useState<'list' | 'calendar'>('list');

  useEffect(() => {
    const mockAnnouncements: Announcement[] = [
      { _id: '1', title: 'H·ªá th·ªëng LMS s·∫Ω b·∫£o tr√¨ v√†o ng√†y 15/12', content: 'H·ªá th·ªëng s·∫Ω t·∫°m ng∆∞ng ho·∫°t ƒë·ªông t·ª´ 02:00 - 06:00 ƒë·ªÉ b·∫£o tr√¨ v√† n√¢ng c·∫•p. Vui l√≤ng l∆∞u √Ω th·ªùi gian n√†y.', type: 'system', status: 'published', priority: 'high', targetAudience: 'all', publishedAt: '2024-12-10T08:00:00Z', createdBy: 'Admin System', createdAt: '2024-12-10T08:00:00Z', updatedAt: '2024-12-10T08:00:00Z', readCount: 1247, clickCount: 89, tags: ['maintenance', 'system-update'] },
      { _id: '2', title: 'Kh√≥a h·ªçc m·ªõi: L·∫≠p tr√¨nh Python c∆° b·∫£n', content: 'Ch√∫ng t√¥i vui m·ª´ng gi·ªõi thi·ªáu kh√≥a h·ªçc l·∫≠p tr√¨nh Python c∆° b·∫£n d√†nh cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu. Kh√≥a h·ªçc s·∫Ω khai gi·∫£ng v√†o ng√†y 20/12.', type: 'email', status: 'scheduled', priority: 'medium', targetAudience: 'students', scheduledAt: '2024-12-18T09:00:00Z', createdBy: 'Marketing Team', createdAt: '2024-12-10T10:00:00Z', updatedAt: '2024-12-10T10:00:00Z', readCount: 0, clickCount: 0, tags: ['new-course', 'python', 'programming'] },
      { _id: '3', title: 'C·∫≠p nh·∫≠t ch√≠nh s√°ch ho√†n ti·ªÅn', content: 'Ch√∫ng t√¥i ƒë√£ c·∫≠p nh·∫≠t ch√≠nh s√°ch ho√†n ti·ªÅn ƒë·ªÉ ƒë·∫£m b·∫£o quy·ªÅn l·ª£i t·ªët nh·∫•t cho h·ªçc vi√™n. Xem chi ti·∫øt t·∫°i ƒë√¢y.', type: 'push', status: 'published', priority: 'medium', targetAudience: 'all', publishedAt: '2024-12-09T14:00:00Z', createdBy: 'Policy Team', createdAt: '2024-12-09T14:00:00Z', updatedAt: '2024-12-09T14:00:00Z', readCount: 892, clickCount: 156, tags: ['policy-update', 'refund'] },
      { _id: '4', title: 'Th√¥ng b√°o v·ªÅ k·ª≥ thi cu·ªëi kh√≥a', content: 'K·ª≥ thi cu·ªëi kh√≥a s·∫Ω di·ªÖn ra t·ª´ ng√†y 25-30/12. H·ªçc vi√™n vui l√≤ng chu·∫©n b·ªã v√† ki·ªÉm tra l·ªãch thi.', type: 'email', status: 'draft', priority: 'high', targetAudience: 'students', createdBy: 'Academic Team', createdAt: '2024-12-10T11:00:00Z', updatedAt: '2024-12-10T11:00:00Z', readCount: 0, clickCount: 0, tags: ['exam', 'final-term'] },
      { _id: '5', title: 'Ch√∫c m·ª´ng nƒÉm m·ªõi 2025', content: 'Ch√∫c m·ª´ng nƒÉm m·ªõi 2025! Ch√∫ng t√¥i ch√∫c t·∫•t c·∫£ h·ªçc vi√™n v√† gi·∫£ng vi√™n m·ªôt nƒÉm m·ªõi tr√†n ƒë·∫ßy s·ª©c kh·ªèe v√† th√†nh c√¥ng.', type: 'system', status: 'scheduled', priority: 'low', targetAudience: 'all', scheduledAt: '2024-12-31T00:00:00Z', createdBy: 'Admin System', createdAt: '2024-12-10T12:00:00Z', updatedAt: '2024-12-10T12:00:00Z', readCount: 0, clickCount: 0, tags: ['new-year', 'celebration'] }
    ];
    setAnnouncements(mockAnnouncements); setFilteredAnnouncements(mockAnnouncements); setLoading(false);
  }, []);

  useEffect(() => {
    let filtered = announcements;
    if (activeTab !== 'all') filtered = filtered.filter(item => item.status === activeTab);
    if (filters.search) filtered = filtered.filter(item => item.title.toLowerCase().includes(filters.search.toLowerCase()) || item.content.toLowerCase().includes(filters.search.toLowerCase()));
    if (filters.type) filtered = filtered.filter(item => item.type === filters.type);
    if (filters.priority) filtered = filtered.filter(item => item.priority === filters.priority);
    if (filters.targetAudience) filtered = filtered.filter(item => item.targetAudience === filters.targetAudience);
    if (filters.status) filtered = filtered.filter(item => item.status === filters.status);
    setFilteredAnnouncements(filtered);
  }, [announcements, activeTab, filters]);

  const handleFilterChange = (key: string, value: string) => setFilters(prev => ({ ...prev, [key]: value }));
  const handleCreateAnnouncement = () => setShowCreateModal(true);
  const handleEditAnnouncement = (announcement: Announcement) => { setSelectedAnnouncement(announcement); setShowEditModal(true); };
  const handleDeleteAnnouncement = (id: string) => { if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th√¥ng b√°o n√†y?')) setAnnouncements(prev => prev.filter(item => item._id !== id)); };
  const handleStatusChange = (id: string, newStatus: Announcement['status']) => setAnnouncements(prev => prev.map(item => item._id === id ? { ...item, status: newStatus } : item));

  const getStatusLabel = (s: string) => ({ draft: 'B·∫£n nh√°p', scheduled: 'ƒê√£ l√™n l·ªãch', published: 'ƒê√£ xu·∫•t b·∫£n', archived: 'ƒê√£ l∆∞u tr·ªØ' }[s] || s);
  const getPriorityLabel = (p: string) => ({ low: 'Th·∫•p', medium: 'Trung b√¨nh', high: 'Cao', urgent: 'Kh·∫©n c·∫•p' }[p] || p);
  const getTypeLabel = (t: string) => ({ system: 'H·ªá th·ªëng', email: 'Email', push: 'Push notification' }[t] || t);
  const getTargetAudienceLabel = (a: string) => ({ all: 'T·∫•t c·∫£', students: 'H·ªçc vi√™n', teachers: 'Gi·∫£ng vi√™n', admins: 'Qu·∫£n tr·ªã vi√™n', specific: 'C·ª• th·ªÉ' }[a] || a);
  const formatDate = (d: string) => new Date(d).toLocaleString('vi-VN');

  if (loading) {
    return (
      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', minHeight: '60vh' }}>
        <Stack spacing={2} alignItems="center">
          <CircularProgress />
          <Typography variant="body2" color="text.secondary">ƒêang t·∫£i th√¥ng b√°o...</Typography>
        </Stack>
      </Box>
    );
  }

  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
      {/* Header */}
      <Card sx={{ background: 'linear-gradient(135deg, #5b8def 0%, #8b5cf6 100%)', color: 'white', borderRadius: 2 }}>
        <CardContent>
          <Stack direction={{ xs: 'column', sm: 'row' }} alignItems={{ xs: 'flex-start', sm: 'center' }} justifyContent="space-between" spacing={2}>
            <Box>
              <Typography variant="h5" fontWeight={800}>Qu·∫£n l√Ω th√¥ng b√°o</Typography>
              <Typography variant="body2" sx={{ opacity: 0.9 }}>Qu·∫£n l√Ω th√¥ng b√°o h·ªá th·ªëng, email campaigns v√† push notifications</Typography>
            </Box>
            <Button variant="contained" onClick={handleCreateAnnouncement}>üì¢ T·∫°o th√¥ng b√°o m·ªõi</Button>
          </Stack>
        </CardContent>
      </Card>

      {/* Stats */}
      <Grid container spacing={2}>
        <Grid item xs={6} md={3}><Card><CardContent><Stack alignItems="center"><Typography variant="h6" fontWeight={800}>{announcements.length}</Typography><Typography variant="caption">T·ªïng th√¥ng b√°o</Typography></Stack></CardContent></Card></Grid>
        <Grid item xs={6} md={3}><Card><CardContent><Stack alignItems="center"><Typography variant="h6" fontWeight={800}>{announcements.filter(a => a.status === 'published').length}</Typography><Typography variant="caption">ƒê√£ xu·∫•t b·∫£n</Typography></Stack></CardContent></Card></Grid>
        <Grid item xs={6} md={3}><Card><CardContent><Stack alignItems="center"><Typography variant="h6" fontWeight={800}>{announcements.filter(a => a.status === 'scheduled').length}</Typography><Typography variant="caption">ƒê√£ l√™n l·ªãch</Typography></Stack></CardContent></Card></Grid>
        <Grid item xs={6} md={3}><Card><CardContent><Stack alignItems="center"><Typography variant="h6" fontWeight={800}>{announcements.filter(a => a.status === 'draft').length}</Typography><Typography variant="caption">B·∫£n nh√°p</Typography></Stack></CardContent></Card></Grid>
      </Grid>

      {/* Tabs */}
      <Paper variant="outlined">
        <Tabs value={activeTab} onChange={(_, v) => setActiveTab(v)} variant="scrollable" scrollButtons allowScrollButtonsMobile>
          <Tab value="all" label={`T·∫•t c·∫£ (${announcements.length})`} />
          <Tab value="draft" label={`B·∫£n nh√°p (${announcements.filter(a => a.status === 'draft').length})`} />
          <Tab value="scheduled" label={`ƒê√£ l√™n l·ªãch (${announcements.filter(a => a.status === 'scheduled').length})`} />
          <Tab value="published" label={`ƒê√£ xu·∫•t b·∫£n (${announcements.filter(a => a.status === 'published').length})`} />
          <Tab value="archived" label={`ƒê√£ l∆∞u tr·ªØ (${announcements.filter(a => a.status === 'archived').length})`} />
        </Tabs>
      </Paper>

      {/* Filters & View */}
      <Paper sx={{ p: 2, borderRadius: 2 }}>
        <Grid container spacing={2} alignItems="center">
          <Grid item xs={12} md={4}><TextField fullWidth placeholder="T√¨m ki·∫øm th√¥ng b√°o..." value={filters.search} onChange={(e) => handleFilterChange('search', e.target.value)} /></Grid>
          <Grid item xs={6} md={2}><FormControl fullWidth><InputLabel>Lo·∫°i</InputLabel><Select label="Lo·∫°i" value={filters.type} onChange={(e) => handleFilterChange('type', String(e.target.value))} MenuProps={{ disableScrollLock: true }}><MenuItem value="">T·∫•t c·∫£</MenuItem><MenuItem value="system">H·ªá th·ªëng</MenuItem><MenuItem value="email">Email</MenuItem><MenuItem value="push">Push notification</MenuItem></Select></FormControl></Grid>
          <Grid item xs={6} md={2}><FormControl fullWidth><InputLabel>M·ª©c ƒë·ªô</InputLabel><Select label="M·ª©c ƒë·ªô" value={filters.priority} onChange={(e) => handleFilterChange('priority', String(e.target.value))} MenuProps={{ disableScrollLock: true }}><MenuItem value="">T·∫•t c·∫£</MenuItem><MenuItem value="low">Th·∫•p</MenuItem><MenuItem value="medium">Trung b√¨nh</MenuItem><MenuItem value="high">Cao</MenuItem><MenuItem value="urgent">Kh·∫©n c·∫•p</MenuItem></Select></FormControl></Grid>
          <Grid item xs={6} md={2}><FormControl fullWidth><InputLabel>ƒê·ªëi t∆∞·ª£ng</InputLabel><Select label="ƒê·ªëi t∆∞·ª£ng" value={filters.targetAudience} onChange={(e) => handleFilterChange('targetAudience', String(e.target.value))} MenuProps={{ disableScrollLock: true }}><MenuItem value="">T·∫•t c·∫£</MenuItem><MenuItem value="all">T·∫•t c·∫£</MenuItem><MenuItem value="students">H·ªçc vi√™n</MenuItem><MenuItem value="teachers">Gi·∫£ng vi√™n</MenuItem><MenuItem value="admins">Qu·∫£n tr·ªã vi√™n</MenuItem><MenuItem value="specific">C·ª• th·ªÉ</MenuItem></Select></FormControl></Grid>
          <Grid item xs={6} md={2}><FormControl fullWidth><InputLabel>Tr·∫°ng th√°i</InputLabel><Select label="Tr·∫°ng th√°i" value={filters.status} onChange={(e) => handleFilterChange('status', String(e.target.value))} MenuProps={{ disableScrollLock: true }}><MenuItem value="">T·∫•t c·∫£</MenuItem><MenuItem value="draft">B·∫£n nh√°p</MenuItem><MenuItem value="scheduled">ƒê√£ l√™n l·ªãch</MenuItem><MenuItem value="published">ƒê√£ xu·∫•t b·∫£n</MenuItem><MenuItem value="archived">ƒê√£ l∆∞u tr·ªØ</MenuItem></Select></FormControl></Grid>
        </Grid>
        <Stack direction="row" justifyContent="flex-end" mt={2}>
          <ToggleButtonGroup exclusive value={viewMode} onChange={(_, v) => v && setViewMode(v)} size="small">
            <ToggleButton value="list">Danh s√°ch</ToggleButton>
            <ToggleButton value="calendar">L·ªãch</ToggleButton>
          </ToggleButtonGroup>
        </Stack>
      </Paper>

      {/* List view */}
      {viewMode === 'list' ? (
        <Stack spacing={2}>
          {filteredAnnouncements.length === 0 ? (
            <Paper variant="outlined" sx={{ p: 4, textAlign: 'center' }}>
              <Typography variant="h6">Kh√¥ng c√≥ th√¥ng b√°o n√†o</Typography>
              <Typography variant="body2" color="text.secondary">Kh√¥ng t√¨m th·∫•y th√¥ng b√°o ph√π h·ª£p v·ªõi b·ªô l·ªçc hi·ªán t·∫°i.</Typography>
            </Paper>
          ) : (
            filteredAnnouncements.map(announcement => (
              <Card key={announcement._id} variant="outlined">
                <CardContent>
                  <Stack direction={{ xs: 'column', md: 'row' }} justifyContent="space-between" alignItems={{ xs: 'flex-start', md: 'center' }} spacing={1}>
                    <Stack direction="row" spacing={1} alignItems="center">
                      <Chip label={getPriorityLabel(announcement.priority)} color={announcement.priority === 'urgent' ? 'error' : announcement.priority === 'high' ? 'error' : announcement.priority === 'medium' ? 'warning' : 'success'} />
                      <Chip label={getStatusLabel(announcement.status)} color={announcement.status === 'published' ? 'success' : announcement.status === 'scheduled' ? 'info' : announcement.status === 'draft' ? 'default' : 'warning'} />
                      <Chip label={getTypeLabel(announcement.type)} />
                    </Stack>
                    <Stack direction="row" spacing={1}>
                      <Button size="small" variant="outlined" onClick={() => handleEditAnnouncement(announcement)}>S·ª≠a</Button>
                      <Button size="small" variant="outlined" color="error" onClick={() => handleDeleteAnnouncement(announcement._id)}>X√≥a</Button>
                    </Stack>
                  </Stack>
                  <Typography variant="h6" fontWeight={800} mt={1}>{announcement.title}</Typography>
                  <Typography variant="body2" color="text.secondary" mt={0.5}>{announcement.content}</Typography>
                  <Grid container spacing={2} mt={1}>
                    <Grid item xs={12} md={3}><Typography variant="body2" color="text.secondary">ƒê·ªëi t∆∞·ª£ng</Typography><Typography>{getTargetAudienceLabel(announcement.targetAudience)}</Typography></Grid>
                    <Grid item xs={12} md={3}><Typography variant="body2" color="text.secondary">Ng∆∞·ªùi t·∫°o</Typography><Typography>{announcement.createdBy}</Typography></Grid>
                    <Grid item xs={12} md={3}><Typography variant="body2" color="text.secondary">Ng√†y t·∫°o</Typography><Typography>{formatDate(announcement.createdAt)}</Typography></Grid>
                    {announcement.scheduledAt && (<Grid item xs={12} md={3}><Typography variant="body2" color="text.secondary">L√™n l·ªãch</Typography><Typography>{formatDate(announcement.scheduledAt)}</Typography></Grid>)}
                    {announcement.publishedAt && (<Grid item xs={12} md={3}><Typography variant="body2" color="text.secondary">Xu·∫•t b·∫£n</Typography><Typography>{formatDate(announcement.publishedAt)}</Typography></Grid>)}
                  </Grid>
                  <Stack direction="row" spacing={1} mt={1}>
                    <Chip size="small" label={`üìñ ${announcement.readCount}`} />
                    <Chip size="small" label={`üñ±Ô∏è ${announcement.clickCount}`} />
                    {announcement.tags.map(tag => (<Chip key={tag} size="small" variant="outlined" label={tag} />))}
                  </Stack>
                  <Stack direction="row" spacing={1} mt={1}>
                    {announcement.status === 'draft' && (<Button size="small" variant="contained" onClick={() => handleStatusChange(announcement._id, 'scheduled')}>L√™n l·ªãch</Button>)}
                    {announcement.status === 'scheduled' && (<Button size="small" variant="contained" onClick={() => handleStatusChange(announcement._id, 'published')}>Xu·∫•t b·∫£n ngay</Button>)}
                    {announcement.status === 'published' && (<Button size="small" variant="outlined" color="warning" onClick={() => handleStatusChange(announcement._id, 'archived')}>L∆∞u tr·ªØ</Button>)}
                    {announcement.status === 'archived' && (<Button size="small" variant="outlined" onClick={() => handleStatusChange(announcement._id, 'draft')}>Kh√¥i ph·ª•c</Button>)}
                  </Stack>
                </CardContent>
              </Card>
            ))
          )}
        </Stack>
      ) : (
        <Card><CardContent>
          <Typography variant="h6" fontWeight={800}>Ch·∫ø ƒë·ªô xem l·ªãch</Typography>
          <Typography variant="body2" color="text.secondary">Ch·ª©c nƒÉng xem l·ªãch th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo.</Typography>
        </CardContent></Card>
      )}

      {/* Create/Edit Dialog placeholder */}
      <Dialog open={showCreateModal || showEditModal} onClose={() => { setShowCreateModal(false); setShowEditModal(false); setSelectedAnnouncement(null); }} fullWidth maxWidth="md">
        <DialogTitle>{showCreateModal ? 'T·∫°o th√¥ng b√°o m·ªõi' : `Ch·ªânh s·ª≠a: ${selectedAnnouncement?.title ?? ''}`}</DialogTitle>
        <DialogContent dividers>
          <Typography variant="body2" color="text.secondary">Bi·ªÉu m·∫´u t·∫°o/ch·ªânh s·ª≠a s·∫Ω ƒë∆∞·ª£c th√™m ·ªü phi√™n b·∫£n ti·∫øp theo.</Typography>
        </DialogContent>
        <DialogActions><Button onClick={() => { setShowCreateModal(false); setShowEditModal(false); setSelectedAnnouncement(null); }}>ƒê√≥ng</Button></DialogActions>
      </Dialog>
    </Box>
  );
};

export default Announcements;
