import React, { useState, useEffect } from 'react';
import './Announcements.css';

interface Announcement {
  _id: string;
  title: string;
  content: string;
  type: 'system' | 'email' | 'push';
  status: 'draft' | 'scheduled' | 'published' | 'archived';
  priority: 'low' | 'medium' | 'high' | 'urgent';
  targetAudience: 'all' | 'students' | 'teachers' | 'admins' | 'specific';
  scheduledAt?: string;
  publishedAt?: string;
  expiresAt?: string;
  createdBy: string;
  createdAt: string;
  updatedAt: string;
  readCount: number;
  clickCount: number;
  tags: string[];
  attachments?: string[];
}

const Announcements: React.FC = () => {
  const [announcements, setAnnouncements] = useState<Announcement[]>([]);
  const [filteredAnnouncements, setFilteredAnnouncements] = useState<Announcement[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'all' | 'draft' | 'scheduled' | 'published' | 'archived'>('all');
  const [filters, setFilters] = useState({
    search: '',
    type: '',
    priority: '',
    targetAudience: '',
    status: ''
  });
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedAnnouncement, setSelectedAnnouncement] = useState<Announcement | null>(null);
  const [viewMode, setViewMode] = useState<'list' | 'calendar'>('list');
    console.log(selectedAnnouncement)
  // Mock data
  useEffect(() => {
    const mockAnnouncements: Announcement[] = [
      {
        _id: '1',
        title: 'H·ªá th·ªëng LMS s·∫Ω b·∫£o tr√¨ v√†o ng√†y 15/12',
        content: 'H·ªá th·ªëng s·∫Ω t·∫°m ng∆∞ng ho·∫°t ƒë·ªông t·ª´ 02:00 - 06:00 ƒë·ªÉ b·∫£o tr√¨ v√† n√¢ng c·∫•p. Vui l√≤ng l∆∞u √Ω th·ªùi gian n√†y.',
        type: 'system',
        status: 'published',
        priority: 'high',
        targetAudience: 'all',
        publishedAt: '2024-12-10T08:00:00Z',
        createdBy: 'Admin System',
        createdAt: '2024-12-10T08:00:00Z',
        updatedAt: '2024-12-10T08:00:00Z',
        readCount: 1247,
        clickCount: 89,
        tags: ['maintenance', 'system-update']
      },
      {
        _id: '2',
        title: 'Kh√≥a h·ªçc m·ªõi: L·∫≠p tr√¨nh Python c∆° b·∫£n',
        content: 'Ch√∫ng t√¥i vui m·ª´ng gi·ªõi thi·ªáu kh√≥a h·ªçc l·∫≠p tr√¨nh Python c∆° b·∫£n d√†nh cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu. Kh√≥a h·ªçc s·∫Ω khai gi·∫£ng v√†o ng√†y 20/12.',
        type: 'email',
        status: 'scheduled',
        priority: 'medium',
        targetAudience: 'students',
        scheduledAt: '2024-12-18T09:00:00Z',
        createdBy: 'Marketing Team',
        createdAt: '2024-12-10T10:00:00Z',
        updatedAt: '2024-12-10T10:00:00Z',
        readCount: 0,
        clickCount: 0,
        tags: ['new-course', 'python', 'programming']
      },
      {
        _id: '3',
        title: 'C·∫≠p nh·∫≠t ch√≠nh s√°ch ho√†n ti·ªÅn',
        content: 'Ch√∫ng t√¥i ƒë√£ c·∫≠p nh·∫≠t ch√≠nh s√°ch ho√†n ti·ªÅn ƒë·ªÉ ƒë·∫£m b·∫£o quy·ªÅn l·ª£i t·ªët nh·∫•t cho h·ªçc vi√™n. Xem chi ti·∫øt t·∫°i ƒë√¢y.',
        type: 'push',
        status: 'published',
        priority: 'medium',
        targetAudience: 'all',
        publishedAt: '2024-12-09T14:00:00Z',
        createdBy: 'Policy Team',
        createdAt: '2024-12-09T14:00:00Z',
        updatedAt: '2024-12-09T14:00:00Z',
        readCount: 892,
        clickCount: 156,
        tags: ['policy-update', 'refund']
      },
      {
        _id: '4',
        title: 'Th√¥ng b√°o v·ªÅ k·ª≥ thi cu·ªëi kh√≥a',
        content: 'K·ª≥ thi cu·ªëi kh√≥a s·∫Ω di·ªÖn ra t·ª´ ng√†y 25-30/12. H·ªçc vi√™n vui l√≤ng chu·∫©n b·ªã v√† ki·ªÉm tra l·ªãch thi.',
        type: 'email',
        status: 'draft',
        priority: 'high',
        targetAudience: 'students',
        createdBy: 'Academic Team',
        createdAt: '2024-12-10T11:00:00Z',
        updatedAt: '2024-12-10T11:00:00Z',
        readCount: 0,
        clickCount: 0,
        tags: ['exam', 'final-term']
      },
      {
        _id: '5',
        title: 'Ch√∫c m·ª´ng nƒÉm m·ªõi 2025',
        content: 'Ch√∫c m·ª´ng nƒÉm m·ªõi 2025! Ch√∫ng t√¥i ch√∫c t·∫•t c·∫£ h·ªçc vi√™n v√† gi·∫£ng vi√™n m·ªôt nƒÉm m·ªõi tr√†n ƒë·∫ßy s·ª©c kh·ªèe v√† th√†nh c√¥ng.',
        type: 'system',
        status: 'scheduled',
        priority: 'low',
        targetAudience: 'all',
        scheduledAt: '2024-12-31T00:00:00Z',
        createdBy: 'Admin System',
        createdAt: '2024-12-10T12:00:00Z',
        updatedAt: '2024-12-10T12:00:00Z',
        readCount: 0,
        clickCount: 0,
        tags: ['new-year', 'celebration']
      }
    ];

    setAnnouncements(mockAnnouncements);
    setFilteredAnnouncements(mockAnnouncements);
    setLoading(false);
  }, []);

  // Apply filters
  useEffect(() => {
    let filtered = announcements;

    // Tab filter
    if (activeTab !== 'all') {
      filtered = filtered.filter(item => item.status === activeTab);
    }

    // Search filter
    if (filters.search) {
      filtered = filtered.filter(item =>
        item.title.toLowerCase().includes(filters.search.toLowerCase()) ||
        item.content.toLowerCase().includes(filters.search.toLowerCase())
      );
    }

    // Type filter
    if (filters.type) {
      filtered = filtered.filter(item => item.type === filters.type);
    }

    // Priority filter
    if (filters.priority) {
      filtered = filtered.filter(item => item.priority === filters.priority);
    }

    // Target audience filter
    if (filters.targetAudience) {
      filtered = filtered.filter(item => item.targetAudience === filters.targetAudience);
    }

    // Status filter
    if (filters.status) {
      filtered = filtered.filter(item => item.status === filters.status);
    }

    setFilteredAnnouncements(filtered);
  }, [announcements, activeTab, filters]);

  const handleFilterChange = (key: string, value: string) => {
    setFilters(prev => ({ ...prev, [key]: value }));
  };

  const handleCreateAnnouncement = () => {
    setShowCreateModal(true);
  };

  const handleEditAnnouncement = (announcement: Announcement) => {
    setSelectedAnnouncement(announcement);
    setShowEditModal(true);
  };

  const handleDeleteAnnouncement = (id: string) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th√¥ng b√°o n√†y?')) {
      setAnnouncements(prev => prev.filter(item => item._id !== id));
    }
  };

  const handleStatusChange = (id: string, newStatus: Announcement['status']) => {
    setAnnouncements(prev => prev.map(item =>
      item._id === id ? { ...item, status: newStatus } : item
    ));
  };

  const getStatusLabel = (status: string) => {
    const labels: Record<string, string> = {
      draft: 'B·∫£n nh√°p',
      scheduled: 'ƒê√£ l√™n l·ªãch',
      published: 'ƒê√£ xu·∫•t b·∫£n',
      archived: 'ƒê√£ l∆∞u tr·ªØ'
    };
    return labels[status] || status;
  };

  const getPriorityLabel = (priority: string) => {
    const labels: Record<string, string> = {
      low: 'Th·∫•p',
      medium: 'Trung b√¨nh',
      high: 'Cao',
      urgent: 'Kh·∫©n c·∫•p'
    };
    return labels[priority] || priority;
  };

  const getTypeLabel = (type: string) => {
    const labels: Record<string, string> = {
      system: 'H·ªá th·ªëng',
      email: 'Email',
      push: 'Push notification'
    };
    return labels[type] || type;
  };

  const getTargetAudienceLabel = (audience: string) => {
    const labels: Record<string, string> = {
      all: 'T·∫•t c·∫£',
      students: 'H·ªçc vi√™n',
      teachers: 'Gi·∫£ng vi√™n',
      admins: 'Qu·∫£n tr·ªã vi√™n',
      specific: 'C·ª• th·ªÉ'
    };
    return labels[audience] || audience;
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <div className="announcements loading">
        <div className="loading-spinner"></div>
        <p>ƒêang t·∫£i th√¥ng b√°o...</p>
      </div>
    );
  }

  return (
    <div className="announcements">
      <div className="header">
        <div className='header__title'>
          <h1>Qu·∫£n l√Ω th√¥ng b√°o</h1>
          <p>Qu·∫£n l√Ω th√¥ng b√°o h·ªá th·ªëng, email campaigns v√† push notifications</p>
        </div>
        <button className="btn btn-primary" onClick={handleCreateAnnouncement}>
          <span>üì¢</span>
          T·∫°o th√¥ng b√°o m·ªõi
        </button>
      </div>

      <div className="stats">
        <div className="stats-card">
          <div className="value">{announcements.length}</div>
          <div className="label">T·ªïng th√¥ng b√°o</div>
        </div>
        <div className="stats-card">
          <div className="value">{announcements.filter(a => a.status === 'published').length}</div>
          <div className="label">ƒê√£ xu·∫•t b·∫£n</div>
        </div>
        <div className="stats-card">
          <div className="value">{announcements.filter(a => a.status === 'scheduled').length}</div>
          <div className="label">ƒê√£ l√™n l·ªãch</div>
        </div>
        <div className="stats-card">
          <div className="value">{announcements.filter(a => a.status === 'draft').length}</div>
          <div className="label">B·∫£n nh√°p</div>
        </div>
      </div>

      <div className="tabs">
        <button
          className={`tab ${activeTab === 'all' ? 'active' : ''}`}
          onClick={() => setActiveTab('all')}
        >
          T·∫•t c·∫£ ({announcements.length})
        </button>
        <button
          className={`tab ${activeTab === 'draft' ? 'active' : ''}`}
          onClick={() => setActiveTab('draft')}
        >
          B·∫£n nh√°p ({announcements.filter(a => a.status === 'draft').length})
        </button>
        <button
          className={`tab ${activeTab === 'scheduled' ? 'active' : ''}`}
          onClick={() => setActiveTab('scheduled')}
        >
          ƒê√£ l√™n l·ªãch ({announcements.filter(a => a.status === 'scheduled').length})
        </button>
        <button
          className={`tab ${activeTab === 'published' ? 'active' : ''}`}
          onClick={() => setActiveTab('published')}
        >
          ƒê√£ xu·∫•t b·∫£n ({announcements.filter(a => a.status === 'published').length})
        </button>
        <button
          className={`tab ${activeTab === 'archived' ? 'active' : ''}`}
          onClick={() => setActiveTab('archived')}
        >
          ƒê√£ l∆∞u tr·ªØ ({announcements.filter(a => a.status === 'archived').length})
        </button>
      </div>

      <div className="controls">
        <div className="filters">
          <div className="filter-group">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm th√¥ng b√°o..."
              value={filters.search}
              onChange={(e) => handleFilterChange('search', e.target.value)}
            />
          </div>
          <div className="filter-group">
            <select
              value={filters.type}
              onChange={(e) => handleFilterChange('type', e.target.value)}
            >
              <option value="">T·∫•t c·∫£ lo·∫°i</option>
              <option value="system">H·ªá th·ªëng</option>
              <option value="email">Email</option>
              <option value="push">Push notification</option>
            </select>
          </div>
          <div className="filter-group">
            <select
              value={filters.priority}
              onChange={(e) => handleFilterChange('priority', e.target.value)}
            >
              <option value="">T·∫•t c·∫£ m·ª©c ƒë·ªô</option>
              <option value="low">Th·∫•p</option>
              <option value="medium">Trung b√¨nh</option>
              <option value="high">Cao</option>
              <option value="urgent">Kh·∫©n c·∫•p</option>
            </select>
          </div>
          <div className="filter-group">
            <select
              value={filters.targetAudience}
              onChange={(e) => handleFilterChange('targetAudience', e.target.value)}
            >
              <option value="">T·∫•t c·∫£ ƒë·ªëi t∆∞·ª£ng</option>
              <option value="all">T·∫•t c·∫£</option>
              <option value="students">H·ªçc vi√™n</option>
              <option value="teachers">Gi·∫£ng vi√™n</option>
              <option value="admins">Qu·∫£n tr·ªã vi√™n</option>
              <option value="specific">C·ª• th·ªÉ</option>
            </select>
          </div>
        </div>

        <div className="view-controls">
          <button
            className={`view-btn ${viewMode === 'list' ? 'active' : ''}`}
            onClick={() => setViewMode('list')}
          >
            üìã Danh s√°ch
          </button>
          <button
            className={`view-btn ${viewMode === 'calendar' ? 'active' : ''}`}
            onClick={() => setViewMode('calendar')}
          >
            üìÖ L·ªãch
          </button>
        </div>
      </div>

      {viewMode === 'list' && (
        <div className="announcements-list">
          {filteredAnnouncements.length === 0 ? (
            <div className="empty-state">
              <h3>Kh√¥ng c√≥ th√¥ng b√°o n√†o</h3>
              <p>Kh√¥ng t√¨m th·∫•y th√¥ng b√°o n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc hi·ªán t·∫°i.</p>
            </div>
          ) : (
            filteredAnnouncements.map(announcement => (
              <div key={announcement._id} className="announcement-card">
                <div className="announcement-header">
                  <div className="announcement-meta">
                    <span className={`priority priority-${announcement.priority}`}>
                      {getPriorityLabel(announcement.priority)}
                    </span>
                    <span className={`status status-${announcement.status}`}>
                      {getStatusLabel(announcement.status)}
                    </span>
                    <span className="type">{getTypeLabel(announcement.type)}</span>
                  </div>
                  <div className="announcement-actions">
                    <button
                      className="btn btn-secondary"
                      onClick={() => handleEditAnnouncement(announcement)}
                    >
                      ‚úèÔ∏è S·ª≠a
                    </button>
                    <button
                      className="btn btn-danger"
                      onClick={() => handleDeleteAnnouncement(announcement._id)}
                    >
                      üóëÔ∏è X√≥a
                    </button>
                  </div>
                </div>

                <div className="announcement-content">
                  <h3 className="announcement-title">{announcement.title}</h3>
                  <p className="announcement-description">{announcement.content}</p>
                  
                  <div className="announcement-details">
                    <div className="detail-item">
                      <span className="label">ƒê·ªëi t∆∞·ª£ng:</span>
                      <span className="value">{getTargetAudienceLabel(announcement.targetAudience)}</span>
                    </div>
                    <div className="detail-item">
                      <span className="label">Ng∆∞·ªùi t·∫°o:</span>
                      <span className="value">{announcement.createdBy}</span>
                    </div>
                    <div className="detail-item">
                      <span className="label">Ng√†y t·∫°o:</span>
                      <span className="value">{formatDate(announcement.createdAt)}</span>
                    </div>
                    {announcement.scheduledAt && (
                      <div className="detail-item">
                        <span className="label">L√™n l·ªãch:</span>
                        <span className="value">{formatDate(announcement.scheduledAt)}</span>
                      </div>
                    )}
                    {announcement.publishedAt && (
                      <div className="detail-item">
                        <span className="label">Xu·∫•t b·∫£n:</span>
                        <span className="value">{formatDate(announcement.publishedAt)}</span>
                      </div>
                    )}
                  </div>

                  <div className="announcement-stats">
                    <div className="stat">
                      <span className="stat-label">üìñ ƒê√£ ƒë·ªçc:</span>
                      <span className="stat-value">{announcement.readCount}</span>
                    </div>
                    <div className="stat">
                      <span className="stat-label">üñ±Ô∏è ƒê√£ click:</span>
                      <span className="stat-value">{announcement.clickCount}</span>
                    </div>
                  </div>

                  {announcement.tags.length > 0 && (
                    <div className="announcement-tags">
                      {announcement.tags.map(tag => (
                        <span key={tag} className="tag">{tag}</span>
                      ))}
                    </div>
                  )}

                  <div className="announcement-actions-bottom">
                    {announcement.status === 'draft' && (
                      <button
                        className="btn btn-success"
                        onClick={() => handleStatusChange(announcement._id, 'scheduled')}
                      >
                        üìÖ L√™n l·ªãch
                      </button>
                    )}
                    {announcement.status === 'scheduled' && (
                      <button
                        className="btn btn-success"
                        onClick={() => handleStatusChange(announcement._id, 'published')}
                      >
                        üöÄ Xu·∫•t b·∫£n ngay
                      </button>
                    )}
                    {announcement.status === 'published' && (
                      <button
                        className="btn btn-warning"
                        onClick={() => handleStatusChange(announcement._id, 'archived')}
                      >
                        üì¶ L∆∞u tr·ªØ
                      </button>
                    )}
                    {announcement.status === 'archived' && (
                      <button
                        className="btn btn-secondary"
                        onClick={() => handleStatusChange(announcement._id, 'draft')}
                      >
                        üìù Kh√¥i ph·ª•c
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {viewMode === 'calendar' && (
        <div className="calendar-view">
          <div className="calendar-placeholder">
            <h3>üìÖ Ch·∫ø ƒë·ªô xem l·ªãch</h3>
            <p>Ch·ª©c nƒÉng xem l·ªãch th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo.</p>
            <p>Hi·ªán t·∫°i vui l√≤ng s·ª≠ d·ª•ng ch·∫ø ƒë·ªô xem danh s√°ch ƒë·ªÉ qu·∫£n l√Ω th√¥ng b√°o.</p>
          </div>
        </div>
      )}

      {/* Create/Edit Modal Placeholder */}
      {(showCreateModal || showEditModal) && (
        <div className="modal-overlay">
          <div className="modal">
            <div className="modal-header">
              <h2 className="modal-title">
                {showCreateModal ? 'T·∫°o th√¥ng b√°o m·ªõi' : 'Ch·ªânh s·ª≠a th√¥ng b√°o'}
              </h2>
              <p className="modal-subtitle">
                {showCreateModal 
                  ? 'T·∫°o th√¥ng b√°o m·ªõi ƒë·ªÉ g·ª≠i ƒë·∫øn ng∆∞·ªùi d√πng' 
                  : 'Ch·ªânh s·ª≠a th√¥ng tin th√¥ng b√°o'
                }
              </p>
            </div>
            <div className="modal-content">
              <div className="modal-placeholder">
                <h3>üîÑ Modal ƒëang ph√°t tri·ªÉn</h3>
                <p>Ch·ª©c nƒÉng t·∫°o v√† ch·ªânh s·ª≠a th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c ho√†n thi·ªán trong phi√™n b·∫£n ti·∫øp theo.</p>
                <div className="modal-actions">
                  <button
                    className="btn btn-secondary"
                    onClick={() => {
                      setShowCreateModal(false);
                      setShowEditModal(false);
                      setSelectedAnnouncement(null);
                    }}
                  >
                    ƒê√≥ng
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Announcements;
