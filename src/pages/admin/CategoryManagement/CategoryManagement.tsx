import React, { useState, useEffect } from 'react';
import './CategoryManagement.css';

interface Category {
  _id: string;
  name: string;
  slug: string;
  description: string;
  parentId?: string;
  parentName?: string;
  level: number;
  order: number;
  isActive: boolean;
  courseCount: number;
  seoTitle?: string;
  seoDescription?: string;
  seoKeywords?: string[];
  imageUrl?: string;
  createdAt: string;
  updatedAt: string;
}

const CategoryManagement: React.FC = () => {
  const [categories, setCategories] = useState<Category[]>([]);
  const [filteredCategories, setFilteredCategories] = useState<Category[]>([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    search: '',
    level: 'all',
    status: 'all',
    parent: 'all'
  });
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState<string | null>(null);
  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null);
  const [viewMode, setViewMode] = useState<'list' | 'tree'>('list');

  useEffect(() => {
    // Simulate API call
    setTimeout(() => {
      const mockCategories: Category[] = [
        {
          _id: 'cat-1',
          name: 'L·∫≠p tr√¨nh',
          slug: 'lap-trinh',
          description: 'C√°c kh√≥a h·ªçc v·ªÅ l·∫≠p tr√¨nh v√† ph√°t tri·ªÉn ph·∫ßn m·ªÅm',
          level: 0,
          order: 1,
          isActive: true,
          courseCount: 45,
          seoTitle: 'Kh√≥a h·ªçc l·∫≠p tr√¨nh online - H·ªçc code t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao',
          seoDescription: 'H·ªçc l·∫≠p tr√¨nh online v·ªõi c√°c kh√≥a h·ªçc ch·∫•t l∆∞·ª£ng cao t·ª´ c√°c chuy√™n gia h√†ng ƒë·∫ßu',
          seoKeywords: ['l·∫≠p tr√¨nh', 'coding', 'programming', 'ph√°t tri·ªÉn ph·∫ßn m·ªÅm'],
          imageUrl: '/images/categories/programming.jpg',
          createdAt: '2024-01-01',
          updatedAt: '2024-01-15'
        },
        {
          _id: 'cat-2',
          name: 'Frontend Development',
          slug: 'frontend-development',
          description: 'Ph√°t tri·ªÉn giao di·ªán ng∆∞·ªùi d√πng v·ªõi HTML, CSS, JavaScript',
          parentId: 'cat-1',
          parentName: 'L·∫≠p tr√¨nh',
          level: 1,
          order: 1,
          isActive: true,
          courseCount: 18,
          seoTitle: 'Kh√≥a h·ªçc Frontend Development - HTML, CSS, JavaScript',
          seoDescription: 'H·ªçc ph√°t tri·ªÉn giao di·ªán web v·ªõi c√°c c√¥ng ngh·ªá frontend hi·ªán ƒë·∫°i',
          seoKeywords: ['frontend', 'html', 'css', 'javascript', 'web development'],
          imageUrl: '/images/categories/frontend.jpg',
          createdAt: '2024-01-02',
          updatedAt: '2024-01-16'
        },
        {
          _id: 'cat-3',
          name: 'Backend Development',
          slug: 'backend-development',
          description: 'Ph√°t tri·ªÉn ph√≠a m√°y ch·ªß v·ªõi Node.js, Python, Java',
          parentId: 'cat-1',
          parentName: 'L·∫≠p tr√¨nh',
          level: 1,
          order: 2,
          isActive: true,
          courseCount: 22,
          seoTitle: 'Kh√≥a h·ªçc Backend Development - Node.js, Python, Java',
          seoDescription: 'H·ªçc ph√°t tri·ªÉn backend v√† API v·ªõi c√°c ng√¥n ng·ªØ l·∫≠p tr√¨nh ph·ªï bi·∫øn',
          seoKeywords: ['backend', 'nodejs', 'python', 'java', 'api development'],
          imageUrl: '/images/categories/backend.jpg',
          createdAt: '2024-01-03',
          updatedAt: '2024-01-17'
        },
        {
          _id: 'cat-4',
          name: 'React',
          slug: 'react',
          description: 'Th∆∞ vi·ªán JavaScript cho x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng',
          parentId: 'cat-2',
          parentName: 'Frontend Development',
          level: 2,
          order: 1,
          isActive: true,
          courseCount: 12,
          seoTitle: 'Kh√≥a h·ªçc React - X√¢y d·ª±ng ·ª©ng d·ª•ng web hi·ªán ƒë·∫°i',
          seoDescription: 'H·ªçc React t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao, x√¢y d·ª±ng SPA chuy√™n nghi·ªáp',
          seoKeywords: ['react', 'javascript', 'frontend', 'spa', 'web app'],
          imageUrl: '/images/categories/react.jpg',
          createdAt: '2024-01-04',
          updatedAt: '2024-01-18'
        },
        {
          _id: 'cat-5',
          name: 'Thi·∫øt k·∫ø',
          slug: 'thiet-ke',
          description: 'C√°c kh√≥a h·ªçc v·ªÅ thi·∫øt k·∫ø ƒë·ªì h·ªça v√† UI/UX',
          level: 0,
          order: 2,
          isActive: true,
          courseCount: 28,
          seoTitle: 'Kh√≥a h·ªçc thi·∫øt k·∫ø ƒë·ªì h·ªça v√† UI/UX chuy√™n nghi·ªáp',
          seoDescription: 'H·ªçc thi·∫øt k·∫ø ƒë·ªì h·ªça, UI/UX v·ªõi c√°c c√¥ng c·ª• hi·ªán ƒë·∫°i',
          seoKeywords: ['thi·∫øt k·∫ø', 'design', 'ui/ux', 'ƒë·ªì h·ªça', 'photoshop'],
          imageUrl: '/images/categories/design.jpg',
          createdAt: '2024-01-05',
          updatedAt: '2024-01-19'
        },
        {
          _id: 'cat-6',
          name: 'Marketing',
          slug: 'marketing',
          description: 'C√°c kh√≥a h·ªçc v·ªÅ marketing s·ªë v√† qu·∫£ng c√°o',
          level: 0,
          order: 3,
          isActive: false,
          courseCount: 15,
          seoTitle: 'Kh√≥a h·ªçc Marketing s·ªë - Chi·∫øn l∆∞·ª£c qu·∫£ng c√°o hi·ªáu qu·∫£',
          seoDescription: 'H·ªçc marketing s·ªë v√† c√°c chi·∫øn l∆∞·ª£c qu·∫£ng c√°o online',
          seoKeywords: ['marketing', 'digital marketing', 'qu·∫£ng c√°o', 'seo'],
          imageUrl: '/images/categories/marketing.jpg',
          createdAt: '2024-01-06',
          updatedAt: '2024-01-20'
        }
      ];

      setCategories(mockCategories);
      setFilteredCategories(mockCategories);
      setLoading(false);
    }, 1000);
  }, []);

  useEffect(() => {
    // Apply filters
    let filtered = categories;

    if (filters.search) {
      filtered = filtered.filter(cat =>
        cat.name.toLowerCase().includes(filters.search.toLowerCase()) ||
        cat.description.toLowerCase().includes(filters.search.toLowerCase())
      );
    }

    if (filters.level !== 'all') {
      filtered = filtered.filter(cat => cat.level === parseInt(filters.level));
    }

    if (filters.status !== 'all') {
      filtered = filtered.filter(cat => 
        filters.status === 'active' ? cat.isActive : !cat.isActive
      );
    }

    if (filters.parent !== 'all') {
      if (filters.parent === 'root') {
        filtered = filtered.filter(cat => !cat.parentId);
      } else if (filters.parent === 'child') {
        filtered = filtered.filter(cat => cat.parentId);
      }
    }

    setFilteredCategories(filtered);
  }, [filters, categories]);

  const handleFilterChange = (key: string, value: string) => {
    setFilters(prev => ({ ...prev, [key]: value }));
  };

  const handleCreateCategory = () => {
    setShowCreateModal(true);
  };

  const handleEditCategory = (category: Category) => {
    setSelectedCategory(category);
    setShowEditModal(category._id);
  };

  const handleDeleteCategory = (categoryId: string) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a danh m·ª•c n√†y?')) {
      setCategories(categories.filter(cat => cat._id !== categoryId));
    }
  };

  const handleToggleStatus = (categoryId: string) => {
    setCategories(categories.map(cat =>
      cat._id === categoryId ? { ...cat, isActive: !cat.isActive } : cat
    ));
  };

  const getLevelIndent = (level: number) => {
    return level * 20;
  };

  const getLevelIcon = (level: number) => {
    switch (level) {
      case 0: return 'üìÅ';
      case 1: return 'üìÇ';
      case 2: return 'üìÑ';
      default: return 'üìÑ';
    }
  };

  const renderCategoryTree = (parentId?: string, level = 0) => {
    const children = filteredCategories.filter(cat => cat.parentId === parentId);
    
    return children.map(category => (
      <div key={category._id} className="category-tree-item">
        <div 
          className="category-tree-row"
          style={{ paddingLeft: `${getLevelIndent(level)}px` }}
        >
          <span className="category-tree-icon">{getLevelIcon(level)}</span>
          <span className="category-tree-name">{category.name}</span>
          <span className="category-tree-count">({category.courseCount} kh√≥a h·ªçc)</span>
          <div className="category-tree-actions">
            <button
              className="category-tree-edit-btn"
              onClick={() => handleEditCategory(category)}
            >
              S·ª≠a
            </button>
            <button
              className="category-tree-delete-btn"
              onClick={() => handleDeleteCategory(category._id)}
            >
              X√≥a
            </button>
          </div>
        </div>
        {renderCategoryTree(category._id, level + 1)}
      </div>
    ));
  };

  if (loading) {
    return (
      <div className="category-management">
        <div className="category-management__loading">
          <div className="loading-spinner"></div>
          <p>ƒêang t·∫£i qu·∫£n l√Ω danh m·ª•c...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="category-management">
      <div className="category-management__header">
        <div className="category-management__title">
          <h1>üè∑Ô∏è Qu·∫£n l√Ω danh m·ª•c</h1>
          <p>Qu·∫£n l√Ω danh m·ª•c kh√≥a h·ªçc, SEO optimization v√† category hierarchy</p>
        </div>
        <button className="category-management__create-btn" onClick={handleCreateCategory}>
          + T·∫°o danh m·ª•c m·ªõi
        </button>
      </div>

      <div className="category-management__stats">
        <div className="category-stat">
          <span className="category-stat__value">{categories.length}</span>
          <span className="category-stat__label">T·ªïng danh m·ª•c</span>
        </div>
        <div className="category-stat">
          <span className="category-stat__value">
            {categories.filter(cat => cat.isActive).length}
          </span>
          <span className="category-stat__label">ƒêang ho·∫°t ƒë·ªông</span>
        </div>
        <div className="category-stat">
          <span className="category-stat__value">
            {categories.filter(cat => !cat.parentId).length}
          </span>
          <span className="category-stat__label">Danh m·ª•c g·ªëc</span>
        </div>
        <div className="category-stat">
          <span className="category-stat__value">
            {categories.reduce((sum, cat) => sum + cat.courseCount, 0)}
          </span>
          <span className="category-stat__label">T·ªïng kh√≥a h·ªçc</span>
        </div>
      </div>

      <div className="category-management__controls">
        <div className="category-management__filters">
          <input
            type="text"
            placeholder="T√¨m ki·∫øm danh m·ª•c..."
            value={filters.search}
            onChange={(e) => handleFilterChange('search', e.target.value)}
            className="category-management__search"
          />
          <select
            value={filters.level}
            onChange={(e) => handleFilterChange('level', e.target.value)}
            className="category-management__filter"
          >
            <option value="all">T·∫•t c·∫£ c·∫•p ƒë·ªô</option>
            <option value="0">C·∫•p 0 (G·ªëc)</option>
            <option value="1">C·∫•p 1</option>
            <option value="2">C·∫•p 2</option>
          </select>
          <select
            value={filters.status}
            onChange={(e) => handleFilterChange('status', e.target.value)}
            className="category-management__filter"
          >
            <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
            <option value="active">ƒêang ho·∫°t ƒë·ªông</option>
            <option value="inactive">Kh√¥ng ho·∫°t ƒë·ªông</option>
          </select>
          <select
            value={filters.parent}
            onChange={(e) => handleFilterChange('parent', e.target.value)}
            className="category-management__filter"
          >
            <option value="all">T·∫•t c·∫£</option>
            <option value="root">Ch·ªâ danh m·ª•c g·ªëc</option>
            <option value="child">Ch·ªâ danh m·ª•c con</option>
          </select>
        </div>
        <div className="category-management__view-toggle">
          <button
            className={`view-toggle-btn ${viewMode === 'list' ? 'active' : ''}`}
            onClick={() => setViewMode('list')}
          >
            üìã Danh s√°ch
          </button>
          <button
            className={`view-toggle-btn ${viewMode === 'tree' ? 'active' : ''}`}
            onClick={() => setViewMode('tree')}
          >
            üå≥ C√¢y danh m·ª•c
          </button>
        </div>
      </div>

      <div className="category-management__content">
        {viewMode === 'list' ? (
          <div className="category-management__list">
            <div className="category-table">
              <table>
                <thead>
                  <tr>
                    <th>Danh m·ª•c</th>
                    <th>M√¥ t·∫£</th>
                    <th>C·∫•p ƒë·ªô</th>
                    <th>Kh√≥a h·ªçc</th>
                    <th>SEO</th>
                    <th>Tr·∫°ng th√°i</th>
                    <th>Thao t√°c</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredCategories.map((category) => (
                    <tr key={category._id} className="category-row">
                      <td>
                        <div className="category-info">
                          <span className="category-icon">{getLevelIcon(category.level)}</span>
                          <div className="category-details">
                            <span className="category-name">{category.name}</span>
                            <span className="category-slug">/{category.slug}</span>
                            {category.parentName && (
                              <span className="category-parent">‚Üê {category.parentName}</span>
                            )}
                          </div>
                        </div>
                      </td>
                      <td>
                        <p className="category-description">{category.description}</p>
                      </td>
                      <td>
                        <span className="category-level">C·∫•p {category.level}</span>
                      </td>
                      <td>
                        <span className="category-course-count">{category.courseCount}</span>
                      </td>
                      <td>
                        <div className="category-seo">
                          {category.seoTitle && (
                            <span className="seo-indicator seo-title">‚úì Title</span>
                          )}
                          {category.seoDescription && (
                            <span className="seo-indicator seo-desc">‚úì Desc</span>
                          )}
                          {category.seoKeywords && category.seoKeywords.length > 0 && (
                            <span className="seo-indicator seo-keywords">‚úì Keywords</span>
                          )}
                        </div>
                      </td>
                      <td>
                        <button
                          className={`status-toggle ${category.isActive ? 'active' : 'inactive'}`}
                          onClick={() => handleToggleStatus(category._id)}
                        >
                          {category.isActive ? 'Ho·∫°t ƒë·ªông' : 'Kh√¥ng ho·∫°t ƒë·ªông'}
                        </button>
                      </td>
                      <td>
                        <div className="category-actions">
                          <button
                            className="category-edit-btn"
                            onClick={() => handleEditCategory(category)}
                          >
                            S·ª≠a
                          </button>
                          <button
                            className="category-delete-btn"
                            onClick={() => handleDeleteCategory(category._id)}
                          >
                            X√≥a
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        ) : (
          <div className="category-management__tree">
            <div className="category-tree">
              {renderCategoryTree()}
            </div>
          </div>
        )}
      </div>

      {/* Create/Edit Category Modal */}
      {showCreateModal && (
        <div className="modal-overlay" onClick={() => setShowCreateModal(false)}>
          <div className="modal" onClick={(e) => e.stopPropagation()}>
            <h3>T·∫°o danh m·ª•c m·ªõi</h3>
            <p>Modal t·∫°o danh m·ª•c s·∫Ω ƒë∆∞·ª£c implement ·ªü ƒë√¢y...</p>
            <button onClick={() => setShowCreateModal(false)}>ƒê√≥ng</button>
          </div>
        </div>
      )}

      {showEditModal && selectedCategory && (
        <div className="modal-overlay" onClick={() => setShowEditModal(null)}>
          <div className="modal" onClick={(e) => e.stopPropagation()}>
            <h3>S·ª≠a danh m·ª•c: {selectedCategory.name}</h3>
            <p>Modal s·ª≠a danh m·ª•c s·∫Ω ƒë∆∞·ª£c implement ·ªü ƒë√¢y...</p>
            <button onClick={() => setShowEditModal(null)}>ƒê√≥ng</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default CategoryManagement;
